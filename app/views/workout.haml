.grid
  %div
    %img{src: "/images/capybara.png"}
  %div
    %h1 Capybara Workout
%div.centered-row
  .container
    %h5
      Refer to the Capybara cheat sheet and use Capybara to instruct the automated browser to click on the buttons below.
%hr

%section.identicals.definition-row
  %h3 Buttons
  %p These buttons can be clicked by their unique values
  .first.centered-row
    .button-row
      .centered-row
        %button.button--horizontal.first Click me!
        %button.button--horizontal.second Click on me too!
  = haml :"partials/_tips", locals: { code_tip: "pry(main)> click_button 'Click me!'" }
%hr

%section.identicals.definition-row
  %h3 Radio Buttons
  %p Input elements can also be selected by their 'name' attributes
  .second.centered-row
    %h5
      :escaped
        <input type='checkbox' name='first'>
    .button-row
      .centered-row
        %form.radio-buttons{ name: "select-box" }
          %ul
            %li
              %input.first{ type: 'checkbox', name: "first"    }
              %span Check me!
            %li
              %input.second{ type: 'checkbox', name: "second"  } 
              %span And me.
  = haml :"partials/_tips", locals: { code_tip: "pry(main)> check('first')" }
%hr

%section.identicals.definition-row
  %h3 Buttons: identical values
  %p Try to click these buttons by their values. What error do you get? Look at using Capybara's `within` syntax
  .third.centered-row
    %h5
      :escaped
        <section class='third'>
    .button-row
      .centered-row
        %button.button--horizontal We're the same...but in different sections
    %h5
      :escaped
        </section>
  %hr
  .fourth.centered-row
    %h5
      :escaped
        <section class='fourth'>
    .button-row
      .centered-row
        %button.button--horizontal We're the same...but in different sections
    %h5
      :escaped
        </section>
  = haml :"partials/_tips", locals: { code_tip: "pry(main)> within('section .fourth') do\n             click_button \"We're the same...but in different sections\"\n           end" }
%hr

%section.identicals.definition-row
  %h3 Buttons: different IDs
  %p  These buttons should be targetted by their IDs. Hint: this is easier than you think.
  %h5
    :escaped
      <button id='left'>
  .fifth.centered-row
    .button-row
      %button.button--horizontal{ id: 'left' } We're the same but we have different IDs
      %button.button--horizontal{ id: 'right'} We're the same but we have different IDs
  = haml :"partials/_tips", locals: { code_tip: "pry(main)> click_button \"We're the same but we have different IDs\"" }
%hr

%section.identicals.definition-row
  %h3 Buttons: different classes
  %p These buttons should be targetted by their classes.
  %h5
    :escaped
      <button class='left'>
  .sixth.centered-row
    .button-row
      %button{ class: 'left'    }  We're the same but we have different classes
      %button{ class: 'right' }  We're the same but we have different classes
  = haml :"partials/_tips", locals: { code_tip: "pry(main)> find('button.left').click" }
%hr

%section.definition-row.centered-row
  %h3 Forms
  %p Try to fill in this form!
  = haml :"partials/_tips", locals: { code_tip: "pry(main)> fill_in 'name', with: 'Bob'" }
  %section
    .container
      %section.madlibs.form-row
        %form{ method: 'POST', action: '/madlibs' }
          %fieldset
            %ul
              - [:name, :age, :gender, :hometown, :'favourite beverage'].each do |input_label|
                %li
                  %label{ for: input_label.to_s } #{input_label.to_s}
                  %input{ type: 'text', name: input_label.to_s }
            .centered-row
              %input{ type: 'submit', value: "Submit" }
